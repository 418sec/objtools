{
    "project": {
        "name": "zs-objtools",
        "description": "Object tools",
        "version": "0.1.0"
    },
    "files": {
        "lib/index.js": {
            "name": "lib/index.js",
            "modules": {},
            "classes": {
                "objtools": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/object-mask.js": {
            "name": "lib/object-mask.js",
            "modules": {},
            "classes": {
                "ObjectMask": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "objtools": {
            "name": "objtools",
            "shortname": "objtools",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/index.js",
            "line": 3,
            "description": "General utility functions for manipulating object."
        },
        "ObjectMask": {
            "name": "ObjectMask",
            "shortname": "ObjectMask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/object-mask.js",
            "line": 3,
            "description": "This class represents a mask, or whitelist, of fields on an object.  Such\na mask is stored in a format that looks like this:\n\n{ foo: true, bar: { baz: true } }\n\nThis mask applies to the properties \"foo\" and \"bar.baz\" on an object.\nWilcards can also be used:\n\n{ foo: false, bar: false, _: true }\n\nThis will allow all fields but foo and bar.  The use of arrays with\na single element is equivalent to the use of wildcards, as arrays in\nthe masked object are treated as objects with numeric keys.  These\ntwo masks are equivalent:\n\n{ foo: [ { bar: true, baz: true } ] }\n\n{ foo: { _: { bar: true, baz: true } } }",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mask",
                    "description": "- The data for the mask",
                    "type": "Object"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "lib/index.js",
            "line": 9,
            "description": "Determines whether a value is considered a scalar or an object.  Currently,\nprimitives plus Date types plus undefined and null plus functions are considered scalar.",
            "itemtype": "method",
            "name": "isScalar",
            "static": 1,
            "params": [
                {
                    "name": "o",
                    "description": "- Value to check",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "objtools"
        },
        {
            "file": "lib/index.js",
            "line": 23,
            "description": "Checks for deep equality between two object or values.",
            "itemtype": "method",
            "name": "deepEquals",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "objtools"
        },
        {
            "file": "lib/index.js",
            "line": 57,
            "description": "Checks whether two scalar values (as determined by isScalar()) are equal.",
            "itemtype": "method",
            "name": "scalarEquals",
            "static": 1,
            "params": [
                {
                    "name": "a1",
                    "description": "- First value",
                    "type": "Mixed"
                },
                {
                    "name": "a2",
                    "description": "- Second value",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "objtools"
        },
        {
            "file": "lib/index.js",
            "line": 72,
            "description": "Returns a deep copy of the given value such that entities are not passed\nby reference.",
            "itemtype": "method",
            "name": "deepCopy",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "- The object or value to copy",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "objtools"
        },
        {
            "file": "lib/index.js",
            "line": 101,
            "description": "Given an object, converts it into a one-level-deep object where the keys are dot-separated\npaths and the values are the values at those paths.",
            "itemtype": "method",
            "name": "collapseToDotted",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "- The object to convert",
                    "type": "Object"
                },
                {
                    "name": "includeRedundantLevels",
                    "description": "- If set to true, the returned object also includes\nkeys for internal objects.  By default, an object such as { foo: { bar: \"baz\"} } will be converted\ninto { \"foo.bar\": \"baz\" }.  If includeRedundantLevels is set, it will instead be converted\ninto { \"foo\": { bar: \"baz\" }, \"foo.bar\": \"baz\" } .",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "stopAtArrays",
                    "description": "- If set to true, the collapsing function will not descend into\narrays.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n  By default, an object such as { foo: [ \"bar\", \"baz\" ] } is converted\n  into { \"foo.0\": \"bar\", \"foo.1\": \"baz\" }.  If stopAtArrays is set, this will instead be converted\n  into { \"foo\": [ \"bar\", \"baz\" ] } ."
            ],
            "return": {
                "description": "- The result",
                "type": "Object"
            },
            "class": "objtools"
        },
        {
            "file": "lib/index.js",
            "line": 142,
            "description": "Returns whether or not the given query fields (in dotted notation) match the document\n(also in dotted notation).  The \"queries\" here are simple equality matches.",
            "itemtype": "method",
            "name": "matchDottedObject",
            "static": 1,
            "params": [
                {
                    "name": "doc",
                    "description": "- The document to test",
                    "type": "Object"
                },
                {
                    "name": "query",
                    "description": "- A one-layer-deep set of key/values to check doc for",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "- Whether or not the doc matches",
                "type": "Boolean"
            },
            "class": "objtools"
        },
        {
            "file": "lib/index.js",
            "line": 165,
            "description": "Same as matchDottedObject, but allows for non-dotted objects and queries.",
            "itemtype": "method",
            "name": "matchObject",
            "static": 1,
            "params": [
                {
                    "name": "doc",
                    "description": "- Object to match against, in structured (not dotted) form",
                    "type": "Object"
                },
                {
                    "name": "query",
                    "description": "- Set of fields (either dotted or structured) to match",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "- Whether or not the object matches",
                "type": "Boolean"
            },
            "class": "objtools"
        },
        {
            "file": "lib/index.js",
            "line": 179,
            "description": "Sets the value at a given path in an object.",
            "itemtype": "method",
            "name": "setPath",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "- The object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "- The path, dot-separated",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "- Value to set",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "- The same object",
                "type": "Object"
            },
            "class": "objtools"
        },
        {
            "file": "lib/index.js",
            "line": 204,
            "description": "Deletes the value at a given path in an object.",
            "itemtype": "method",
            "name": "deletePath",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "- The object that was passed in",
                "type": "Object"
            },
            "class": "objtools"
        },
        {
            "file": "lib/index.js",
            "line": 230,
            "description": "Gets the value at a given path in an object.",
            "itemtype": "method",
            "name": "getPath",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "- The object",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "- The path, dot-separated",
                    "type": "String"
                },
                {
                    "name": "allowSkipArrays",
                    "description": "- If true: If a field in an object is an array and the\npath key is non-numeric, and the array has exactly 1 element, then the first element\nof the array is used.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "- The value at the path",
                "type": "Mixed"
            },
            "class": "objtools"
        },
        {
            "file": "lib/object-mask.js",
            "line": 33,
            "description": "Returns a copy of the given object, but only including the fields allowed by\nthe mask.  If the maskedOutHook function is provided, it is called for\neach field disallowed by the mask (at the highest level it is disallowed).",
            "itemtype": "method",
            "name": "filterObject",
            "params": [
                {
                    "name": "obj",
                    "description": "- Object to filter",
                    "type": "Object"
                },
                {
                    "name": "maskedOutHook",
                    "description": "- Function to call for fields disallowed\nby the mask",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "path",
                            "description": "- Path on the object that was masked out",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "- The object after removing masked out fields.  Note that\nthe returned object may still contain references to the original object.\nFields that are not masked out are copied by reference.",
                "type": "Object"
            },
            "class": "ObjectMask"
        },
        {
            "file": "lib/object-mask.js",
            "line": 79,
            "description": "Returns a subsection of a mask given a dot-separated path to the subsection.",
            "itemtype": "method",
            "name": "getSubMask",
            "params": [
                {
                    "name": "path",
                    "description": "- Dot-separated path to submask to fetch",
                    "type": "String"
                }
            ],
            "return": {
                "description": "- Mask component corresponding to the path",
                "type": "ObjectMask"
            },
            "class": "ObjectMask"
        },
        {
            "file": "lib/object-mask.js",
            "line": 100,
            "description": "Returns true if the given path is allowed by the mask.  false otherwise.",
            "itemtype": "method",
            "name": "checkMaskPath",
            "params": [
                {
                    "name": "path",
                    "description": "- Dot-separated path",
                    "type": "String"
                }
            ],
            "return": {
                "description": "- Whether or not the given path is allowed",
                "type": "Boolean"
            },
            "class": "ObjectMask"
        },
        {
            "file": "lib/object-mask.js",
            "line": 111,
            "description": "Returns the internal object that represents this mask.",
            "itemtype": "method",
            "name": "toObject",
            "return": {
                "description": "- Object representation of this mask",
                "type": "Object"
            },
            "class": "ObjectMask"
        },
        {
            "file": "lib/object-mask.js",
            "line": 121,
            "description": "Combines two or more masks such that the result mask matches fields matched by\nany of the combined masks.",
            "itemtype": "method",
            "name": "addMasks",
            "static": 1,
            "params": [
                {
                    "name": "mask1",
                    "description": "",
                    "type": "ObjectMask|Object"
                },
                {
                    "name": "mask2...",
                    "description": "",
                    "type": "ObjectMask|Object"
                }
            ],
            "return": {
                "description": "- The result of adding together the component masks",
                "type": "ObjectMask"
            },
            "class": "ObjectMask"
        },
        {
            "file": "lib/object-mask.js",
            "line": 215,
            "description": "Adds a set of masks together, but using a logical AND instead of a logical OR (as in addMasks).\nIE, a field must be allowed in all given masks to be in the result mask.",
            "itemtype": "method",
            "name": "andMasks",
            "static": 1,
            "params": [
                {
                    "name": "mask1",
                    "description": "",
                    "type": "ObjectMask|Object"
                },
                {
                    "name": "mask2...",
                    "description": "",
                    "type": "ObjectMask|Object"
                }
            ],
            "return": {
                "description": "- The result of ANDing together the component masks",
                "type": "ObjectMask"
            },
            "class": "ObjectMask"
        },
        {
            "file": "lib/object-mask.js",
            "line": 313,
            "description": "Check if a mask is valid in strict form (ie, it only contains objects and booleans)",
            "itemtype": "method",
            "name": "validate",
            "return": {
                "description": "- Whether or not the mask is strictly valid",
                "type": "Boolean"
            },
            "class": "ObjectMask"
        },
        {
            "file": "lib/object-mask.js",
            "line": 332,
            "description": "Returns an array of fields in the given object which are restricted by the given mask",
            "itemtype": "method",
            "name": "getMaskedOutFields",
            "params": [
                {
                    "name": "obj",
                    "description": "- The object to check against",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "- Paths to fields that are restricted by the mask",
                "type": "String[]"
            },
            "class": "ObjectMask"
        },
        {
            "file": "lib/object-mask.js",
            "line": 347,
            "description": "Given a dot-notation mapping from fields to values, remove all fields that are not\nallowed by the mask.",
            "itemtype": "method",
            "name": "filterDottedObject",
            "params": [
                {
                    "name": "dottedObj",
                    "description": "- Map from dotted paths to values, such as { \"foo.bar\": \"baz\" }",
                    "type": "Object"
                },
                {
                    "name": "maskedOutHook",
                    "description": "- Function to call for removed fields",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "path",
                            "description": "- Path of the masked out field",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "- The result",
                "type": "Object"
            },
            "class": "ObjectMask"
        },
        {
            "file": "lib/object-mask.js",
            "line": 371,
            "description": "Returns an array of fields in the given object which are restricted by the given mask.  The\nobject is in dotted notation as in filterDottedObject()",
            "itemtype": "method",
            "name": "getDottedMaskedOutFields",
            "params": [
                {
                    "name": "obj",
                    "description": "- The object to check against",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "- Paths to fields that are restricted by the mask",
                "type": "String[]"
            },
            "class": "ObjectMask"
        },
        {
            "file": "lib/object-mask.js",
            "line": 387,
            "description": "Given a structured document, ensures that\nall fields are allowed by the given mask.  Returns true or false.",
            "itemtype": "method",
            "name": "checkFields",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ObjectMask"
        },
        {
            "file": "lib/object-mask.js",
            "line": 399,
            "description": "Given a dot-notation mapping from fields to values (only 1 level deep is checked),\nensure that all fields are in the (structured) mask.",
            "itemtype": "method",
            "name": "checkDottedFields",
            "params": [
                {
                    "name": "dottedObj",
                    "description": "- Mapping from dot-separated paths to values",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ObjectMask"
        },
        {
            "file": "lib/object-mask.js",
            "line": 414,
            "description": "Creates a structured mask given a list of fields that should be included in the mask.",
            "itemtype": "method",
            "name": "createMaskFromFieldList",
            "static": 1,
            "params": [
                {
                    "name": "fields",
                    "description": "- Array of fields to include",
                    "type": "String[]"
                }
            ],
            "return": {
                "description": "- The created mask",
                "type": "ObjectMask"
            },
            "class": "ObjectMask"
        },
        {
            "file": "lib/object-mask.js",
            "line": 435,
            "description": "Returns a function that filters object fields based on a structured mask/whitelist.",
            "itemtype": "method",
            "name": "createFilterFunc",
            "static": 1,
            "return": {
                "description": "- A function(obj) that is the equivalent of calling filterObject()\non obj",
                "type": "Function"
            },
            "class": "ObjectMask"
        }
    ],
    "warnings": []
}